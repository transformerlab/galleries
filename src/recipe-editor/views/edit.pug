extends layout

block head
  title Edit Recipe - #{recipeFilename}
  style.
    .container {
      max-width: 800px;
    }
    textarea#content {
      height: 400px;
    }
    .recipe-header {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 20px;
    }
    .card-image {
      width: 80px;
      height: 80px;
      border-radius: 8px;
      object-fit: cover;
      border: 2px solid #ddd;
      background: #f8f9fa;
    }
    .card-image-placeholder {
      width: 80px;
      height: 80px;
      border-radius: 8px;
      background: #f8f9fa;
      border: 2px dashed #ddd;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      color: #666;
      text-align: center;
    }
    .recipe-header-content {
      flex: 1;
    }
    .recipe-header h1 {
      margin: 0;
      text-align: left;
    }
    .notes-section {
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 20px;
    }
    .notes-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 15px;
      background: #f8f9fa;
      border-bottom: 1px solid #ddd;
    }
    .notes-toggle {
      display: flex;
      gap: 5px;
    }
    .toggle-btn {
      padding: 4px 8px;
      font-size: 12px;
      border: 1px solid #ddd;
      background: white;
      cursor: pointer;
      border-radius: 3px;
    }
    .toggle-btn.active {
      background: #007bff;
      color: white;
      border-color: #007bff;
    }
    .notes-content {
      padding: 15px;
      min-height: 200px;
    }
    .notes-preview {
      min-height: 200px;
      line-height: 1.6;
    }
    .notes-preview h1, .notes-preview h2, .notes-preview h3, .notes-preview h4, .notes-preview h5, .notes-preview h6 {
      margin-top: 0;
      margin-bottom: 10px;
    }
    .notes-preview p {
      margin-bottom: 10px;
    }
    .notes-preview code {
      background: #f8f9fa;
      padding: 2px 4px;
      border-radius: 3px;
      font-family: monospace;
    }
    .notes-preview pre {
      background: #f8f9fa;
      padding: 10px;
      border-radius: 4px;
      overflow-x: auto;
    }
    .notes-preview blockquote {
      border-left: 4px solid #007bff;
      padding-left: 15px;
      margin-left: 0;
      color: #666;
    }
    .notes-preview ul, .notes-preview ol {
      padding-left: 20px;
    }
    .notes-textarea {
      width: 100%;
      min-height: 200px;
      border: none;
      outline: none;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 13px;
      line-height: 1.4;
      resize: vertical;
      padding: 0;
    }

block content
  .recipe-header
    .card-image-container
      img.card-image#cardImage(src=recipe.cardImage || '', alt='Recipe image', style=recipe.cardImage ? '' : 'display: none;')
      .card-image-placeholder#cardImagePlaceholder(style=recipe.cardImage ? 'display: none;' : '') No Image
    .recipe-header-content
      h1 Edit Recipe: #{recipe.title || recipeFilename}
  
  .filename-display Editing: #{recipeFilename}
  
  form#editForm
    .form-group
      label(for='title') Recipe Title
      input#title(
        type='text'
        name='title'
        value=recipe.title || ''
        placeholder='Enter recipe title'
      )
    
    .form-group
      label(for='description') Description
      textarea#description(
        name='description'
        rows='3'
        placeholder='Enter recipe description'
      )= recipe.description || ''
    
    .form-group
      label Notes
      .notes-section
        .notes-header
          span Notes (Markdown)
          .notes-toggle
            button.toggle-btn.active#previewBtn(type='button') Preview
            button.toggle-btn#editBtn(type='button') Edit
        .notes-content
          .notes-preview#notesPreview
          textarea.notes-textarea#notesTextarea(
            name='notes'
            placeholder='Enter notes in Markdown format'
            style='display: none;'
          )= recipe.notes || ''
    
    .form-group
      label(for='content') Recipe JSON Content
      textarea#content(
        name='content'
        placeholder='Enter valid JSON content'
        required
      )= JSON.stringify(recipe, null, 2)
      .validation-message#validation-message
    
    .button-group
      button.btn.btn-primary(type='submit') Save Changes
      a.btn.btn-secondary(href='/') Cancel
      button.btn.btn-danger(type='button', onclick=`deleteRecipe('${recipeFilename}')`) Delete Recipe

block scripts
  script(src='https://cdn.jsdelivr.net/npm/marked/marked.min.js')
  script.
    const form = document.getElementById('editForm');
    const contentTextarea = document.getElementById('content');
    const titleInput = document.getElementById('title');
    const descriptionTextarea = document.getElementById('description');
    const notesTextarea = document.getElementById('notesTextarea');
    const validationMessage = document.getElementById('validation-message');
    const cardImage = document.getElementById('cardImage');
    const cardImagePlaceholder = document.getElementById('cardImagePlaceholder');
    const notesPreview = document.getElementById('notesPreview');
    const previewBtn = document.getElementById('previewBtn');
    const editBtn = document.getElementById('editBtn');

    // Markdown preview toggle
    let notesMode = 'preview'; // 'preview' or 'edit'

    function updateNotesPreview() {
      const notesContent = notesTextarea.value;
      if (notesContent.trim()) {
        notesPreview.innerHTML = marked.parse(notesContent);
      } else {
        notesPreview.innerHTML = '<em>No notes</em>';
      }
    }

    function switchNotesMode(mode) {
      notesMode = mode;
      if (mode === 'preview') {
        updateNotesPreview();
        notesPreview.style.display = 'block';
        notesTextarea.style.display = 'none';
        previewBtn.classList.add('active');
        editBtn.classList.remove('active');
      } else {
        notesPreview.style.display = 'none';
        notesTextarea.style.display = 'block';
        previewBtn.classList.remove('active');
        editBtn.classList.add('active');
        notesTextarea.focus();
      }
    }

    // Event listeners for notes toggle
    previewBtn.addEventListener('click', (e) => {
      e.preventDefault();
      switchNotesMode('preview');
    });

    editBtn.addEventListener('click', (e) => {
      e.preventDefault();
      switchNotesMode('edit');
    });

    // Update preview when notes text changes
    notesTextarea.addEventListener('input', () => {
      if (notesMode === 'preview') {
        updateNotesPreview();
      }
    });

    // Update card image when JSON changes
    function updateCardImage() {
      try {
        const currentContent = JSON.parse(contentTextarea.value);
        const imageUrl = currentContent.cardImage;
        
        if (imageUrl) {
          cardImage.src = imageUrl;
          cardImage.style.display = 'block';
          cardImagePlaceholder.style.display = 'none';
        } else {
          cardImage.style.display = 'none';
          cardImagePlaceholder.style.display = 'flex';
        }
      } catch (error) {
        // If JSON is invalid, don't update image
      }
    }

    // Validate JSON in real-time
    function validateJSON() {
      try {
        const content = contentTextarea.value.trim();
        if (!content) {
          validationMessage.textContent = 'JSON content is required';
          validationMessage.className = 'validation-message validation-error';
          return false;
        }
        
        const parsed = JSON.parse(content);
        validationMessage.textContent = 'Valid JSON âœ“';
        validationMessage.className = 'validation-message validation-success';
        return true;
      } catch (error) {
        validationMessage.textContent = `Invalid JSON: ${error.message}`;
        validationMessage.className = 'validation-message validation-error';
        return false;
      }
    }

    // Update JSON when title, description, or notes changes
    function updateJSON() {
      try {
        const currentContent = JSON.parse(contentTextarea.value);
        currentContent.title = titleInput.value;
        currentContent.description = descriptionTextarea.value;
        currentContent.notes = notesTextarea.value;
        contentTextarea.value = JSON.stringify(currentContent, null, 2);
        validateJSON();
        updateCardImage();
      } catch (error) {
        // If JSON is invalid, don't update
      }
    }

    // Event listeners
    contentTextarea.addEventListener('input', () => {
      validateJSON();
      updateCardImage();
    });
    titleInput.addEventListener('input', updateJSON);
    descriptionTextarea.addEventListener('input', updateJSON);
    notesTextarea.addEventListener('input', updateJSON);

    // Initial setup
    validateJSON();
    updateCardImage();
    updateNotesPreview();

    // Form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!validateJSON()) {
        alert('Please fix the JSON content before saving');
        return;
      }
      
      try {
        const content = contentTextarea.value;
        const parsedContent = JSON.parse(content);
        
        const response = await fetch(`/api/recipes/${encodeURIComponent('#{recipeFilename}')}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ content: parsedContent })
        });
        
        if (response.ok) {
          // Show success message briefly before redirecting
          const originalSubmitBtn = document.querySelector('.btn-primary');
          originalSubmitBtn.textContent = 'Saved!';
          originalSubmitBtn.style.background = '#28a745';
          
          setTimeout(() => {
            window.location.href = '/';
          }, 1000);
        } else {
          const error = await response.json();
          alert(`Error updating recipe: ${error.error}`);
        }
      } catch (error) {
        alert(`Error updating recipe: ${error.message}`);
      }
    });

    // Delete function
    async function deleteRecipe(filename) {
      if (!confirm(`Are you sure you want to delete "${recipeFilename}"?`)) {
        return;
      }
      
      try {
        const response = await fetch(`/api/recipes/${encodeURIComponent(recipeFilename)}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          alert('Recipe deleted successfully');
          window.location.href = '/';
        } else {
          const error = await response.json();
          alert(`Error deleting recipe: ${error.error}`);
        }
      } catch (error) {
        alert(`Error deleting recipe: ${error.message}`);
      }
    }
